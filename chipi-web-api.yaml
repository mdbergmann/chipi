openapi: 3.0.3
info:
  title: Chipi Web API
  description: |
    Simple REST interface for reading and updating Chipi items.

    • All requests **must** contain a valid API key in header `X-Api-Key`.  
    • Authorisation is scope based; for now two scopes exist:
        – `read`   (needed for GET operations)  
        – `update` (needed for POST operations)
  version: "0.1.0"

servers:
  - url: http://localhost:8765
    description: Local development server

security:
  - ApiKeyAuth: []          # applied globally

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Api-Key

  schemas:
    Item:
      type: object
      required: [name, value]
      properties:
        name:
          type: string
          description: Internal item identifier (case-insensitive).
        label:
          type: string
          nullable: true
          description: Localised or human readable name.
        value:
          oneOf:
            - type: integer
            - type: number
            - type: string
            - type: boolean
            - type: "null"
          description: Current item value.
        timestamp:
          type: string
          format: date-time
          description: Time when the value was last changed (optional; present if persistence enabled).
      example:
        name: "temperature-living"
        label: "Living-room temperature"
        value: 21.3
        timestamp: "2025-06-01T15:04:05Z"

    ItemUpdate:
      type: object
      required: [value]
      properties:
        value:
          description: New value to set (same scalar rules as Item.value).
          oneOf:
            - type: integer
            - type: number
            - type: string
            - type: boolean
            - type: "null"
      example: { "value": 42 }

    Error:
      type: object
      required: [error]
      properties:
        error:
          type: string
      example: { "error": "Invalid API key" }

paths:
  /items:
    get:
      summary: List all items
      operationId: listItems
      tags: [Items]
      responses:
        "200":
          description: Array with all items (possibly empty).
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Item" }
        "401":
          description: Missing or invalid API key
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "403":
          description: Key has no `read` right
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }

  /items/{itemName}:
    parameters:
      - in: path
        name: itemName
        required: true
        schema: { type: string }
        description: Item identifier (case-insensitive)

    get:
      summary: Get a single item
      operationId: getItem
      tags: [Items]
      responses:
        "200":
          description: Item successfully returned
          content:
            application/json:
              schema:
                type: array           # server always wraps result in array
                minItems: 1
                maxItems: 1
                items: { $ref: "#/components/schemas/Item" }
        "401":
          description: Missing or invalid API key
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "403":
          description: Key has no `read` right
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "404":
          description: Item not found
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }

    post:
      summary: Update (push) an item value
      operationId: updateItem
      tags: [Items]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ItemUpdate" }
            examples:
              string: { value: { value: "hello" } }
              int:    { value: { value: 23 } }
              bool:   { value: { value: true } }
              null:   { value: { value: null } }
      responses:
        "204":
          description: Value accepted and will be processed
        "400":
          description: Malformed JSON or missing `"value"` field
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "401":
          description: Missing or invalid API key
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "403":
          description: Key lacks `update` right
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "404":
          description: Item not found
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "413":
          description: Payload exceeds 256 bytes
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "500":
          description: Internal JSON parse error
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
          