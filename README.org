WIP: Project for house automation in Common Lisp: House automation bus (hab)

*** House Automation for Common Lisp

****  Motivation

I use home automation in my home. Currently utilizing [[https://www.openhab.org/][openHAB]]. While openHAB has many features and supports many devices and so on, it is also a heavy beast.

So my aim was to eventually replace openHAB. There are a few things still missing to do this. The current state of the cl-hab project lacks the following for me to be able to replace openHAB:

- support for KNX
- a REST interface
- a UI to interact with the system

**** What does cl-hab currently do

***** cl-hab consists of the following components:

- items: items are a primitive to represent the temperatur of a sensor, the state of light in your house, the state of you window being open or closed, etc.

- persistence: persistences allow to persist and load the state of items. Currently two types of persistences are supported:
    - simple-persistence that just stores the current state and can retrieve it
    - historic persiastence with a support for influxdb to store each changed item value in influxdb and also retrieve values for a specific time range to calculate averages, peaks or whatever.

- rules: rules are kind of scripts that are run on certain 'triggers'. Triggers may be a change of an item value, or a cron timing.

**** How does it work

cl-hab is largely based on [[https://github.com/mdbergmann/cl-gserver][Sento]] a Common Lisp Actor Framework where features like thread-safety, queuing and an event-bus are very handy for cl-hab.

A full production example that defines items, persistences and rules can be seen [[https://github.com/mdbergmann/cl-etaconnector/blob/master/eta-hab.lisp][here]]. This script, still very much based on Common Lisp, is a full example configuration of cl-hab. At the end of the script evaluation items, persistences and rules will start their work.

This particular example uses Common Lisp libraries like [[https://github.com/bendudson/py4cl][py4cl]] (to talk to ina219 analog 2 didital converter for a pressure sensor in a zisterne plugged to the gpios of an Rapi PI 4), or just [[https://github.com/edicl/drakma][Drakma]] to query data of a [[https://www.shelly-support.eu/][Shelly]] power switch.

**** But let's go slowly

The top of the cl-hab standalone script should include this in order to make sure that dependencies are loaded properly.

#+begin_src lisp
(eval-when (:compile-toplevel :load-toplevel :execute)
  (ql:quickload :cl-hab))  ; at least this if you don't have more
#+end_src

Next thing is that you might want to define a separate package using =defpackage=, it allows to inherit symbols using =:use= or =:import-from= that you want to use in the script.

***** defining the global environment
This is done by =(defconfig)=. This expression should be before items, persistences and rules because it defined and starts the actor system.

***** define items
The simplest form to define an item is:

#+begin_src lisp
(defitem 'myitem "My Item" 'integer)
#+end_src

This defines an item with no interactions. You could manually call =SET-VALUE= function to give it a value or =GET-VALUE= to retrieve its value. But that's probably not of much use.

Usually you'd want to at least define an initial value. Well you can do so by:

#+begin_src lisp
  (defitem 'myitem "My Item" 'integer
    :initial-value 0)
#+end_src

